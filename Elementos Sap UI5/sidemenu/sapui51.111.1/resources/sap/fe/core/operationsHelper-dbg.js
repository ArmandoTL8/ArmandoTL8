/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/m/MessageBox", "sap/ui/core/message/Message", "sap/ui/model/json/JSONModel", "./CommonUtils", "./controllerextensions/dialog/OperationsDialog.block", "./controllerextensions/messageHandler/messageHandling", "./formatters/TableFormatterTypes"], function (MessageBox, Message, JSONModel, CommonUtils, OperationsDialog, messageHandling, TableFormatterTypes) {
  "use strict";

  var MessageType = TableFormatterTypes.MessageType;
  function renderMessageView(mParameters, oResourceBundle, messageHandler, aMessages, strictHandlingUtilities, isMultiContext412, resolve, sGroupId) {
    const sActionName = mParameters.label;
    const oModel = mParameters.model;
    const strictHandlingPromises = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingPromises;
    let sMessage;
    let sCancelButtonTxt = CommonUtils.getTranslatedText("C_COMMON_DIALOG_CANCEL", oResourceBundle);
    if (aMessages.length === 1) {
      const messageText = aMessages[0].getMessage();
      const identifierText = aMessages[0].getAdditionalText();
      if (!isMultiContext412) {
        sMessage = `${messageText}\n${CommonUtils.getTranslatedText("PROCEED", oResourceBundle)}`;
      } else if (identifierText !== undefined && identifierText !== "") {
        sCancelButtonTxt = CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP", oResourceBundle);
        const sHeaderInfoTypeName = mParameters.control.getParent().getTableDefinition().headerInfoTypeName;
        if (sHeaderInfoTypeName) {
          sMessage = `${sHeaderInfoTypeName} ${identifierText}: ${messageText}\n\n${CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP_SINGLE_MESSAGE_TEXT", oResourceBundle)}`;
        } else {
          sMessage = `${identifierText}: ${messageText}\n\n${CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP_SINGLE_MESSAGE_TEXT", oResourceBundle)}`;
        }
      } else {
        sCancelButtonTxt = CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP", oResourceBundle);
        sMessage = `${messageText}\n\n${CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP_SINGLE_MESSAGE_TEXT", oResourceBundle)}`;
      }
      MessageBox.warning(sMessage, {
        title: CommonUtils.getTranslatedText("WARNING", oResourceBundle),
        actions: [sActionName, sCancelButtonTxt],
        emphasizedAction: sActionName,
        onClose: function (sAction) {
          if (sAction === sActionName) {
            if (!isMultiContext412) {
              resolve(true);
              oModel.submitBatch(sGroupId);
              if (mParameters.requestSideEffects) {
                mParameters.requestSideEffects();
              }
            } else {
              strictHandlingPromises.forEach(function (sHPromise) {
                sHPromise.resolve(true);
                oModel.submitBatch(sHPromise.groupId);
                if (sHPromise.requestSideEffects) {
                  sHPromise.requestSideEffects();
                }
              });
              const strictHandlingFails = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingTransitionFails;
              if (strictHandlingFails.length > 0) {
                messageHandler === null || messageHandler === void 0 ? void 0 : messageHandler.removeTransitionMessages();
              }
            }
            if (strictHandlingUtilities) {
              strictHandlingUtilities.is412Executed = true;
            }
          } else {
            if (strictHandlingUtilities) {
              strictHandlingUtilities.is412Executed = false;
            }
            if (!isMultiContext412) {
              resolve(false);
            } else {
              strictHandlingPromises.forEach(function (sHPromise) {
                sHPromise.resolve(false);
              });
            }
          }
          if (strictHandlingUtilities) {
            strictHandlingUtilities.strictHandlingWarningMessages = [];
          }
        }
      });
    } else if (aMessages.length > 1) {
      if (isMultiContext412) {
        sCancelButtonTxt = CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP", oResourceBundle);
        const genericMessage = new Message({
          message: CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP_MESSAGES_WARNING", oResourceBundle),
          type: MessageType.Warning,
          target: undefined,
          persistent: true,
          description: CommonUtils.getTranslatedText("C_COMMON_DIALOG_SKIP_MESSAGES_TEXT", oResourceBundle, [sActionName])
        });
        aMessages = [genericMessage].concat(aMessages);
      }
      const oMessageDialogModel = new JSONModel();
      oMessageDialogModel.setData(aMessages);
      const bStrictHandlingFlow = true;
      const oMessageObject = messageHandling.prepareMessageViewForDialog(oMessageDialogModel, bStrictHandlingFlow, isMultiContext412);
      const operationsDialog = new OperationsDialog({
        messageObject: oMessageObject,
        isMultiContext412: isMultiContext412,
        resolve: resolve,
        model: oModel,
        groupId: sGroupId,
        actionName: sActionName,
        strictHandlingUtilities: strictHandlingUtilities,
        strictHandlingPromises: strictHandlingPromises,
        messageHandler: messageHandler,
        messageDialogModel: oMessageDialogModel,
        cancelButtonTxt: sCancelButtonTxt
      });
      operationsDialog.open();
    }
  }
  async function fnOnStrictHandlingFailed(sGroupId, mParameters, oResourceBundle, currentContextIndex, oContext, iContextLength, messageHandler, strictHandlingUtilities, a412Messages) {
    if (currentContextIndex === null && iContextLength === null || currentContextIndex === 1 && iContextLength === 1) {
      return new Promise(function (resolve) {
        operationsHelper.renderMessageView(mParameters, oResourceBundle, messageHandler, a412Messages, strictHandlingUtilities, false, resolve, sGroupId);
      });
    } else {
      const sActionName = mParameters.label;
      const a412TransitionMessages = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingWarningMessages;
      const sColumn = mParameters.control.getParent().getIdentifierColumn();
      let sValue = "";
      if (sColumn && iContextLength && iContextLength > 1) {
        sValue = oContext && oContext.getObject(sColumn);
      }
      a412Messages.forEach(function (msg) {
        msg.setType("Warning");
        msg.setAdditionalText(sValue);
        a412TransitionMessages.push(msg);
      });
      if (mParameters.dialog && mParameters.dialog.isOpen()) {
        mParameters.dialog.close();
      }
      const strictHandlingPromises = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingPromises;
      const strictHandlingPromise = new Promise(function (resolve) {
        strictHandlingPromises.push({
          groupId: sGroupId,
          resolve: resolve,
          actionName: sActionName,
          model: mParameters.model,
          value: sValue,
          requestSideEffects: mParameters.requestSideEffects
        });
      });
      strictHandlingUtilities.strictHandlingWarningMessages = a412TransitionMessages;
      strictHandlingUtilities.strictHandlingPromises = strictHandlingPromises;
      if (currentContextIndex === iContextLength) {
        operationsHelper.renderMessageView(mParameters, oResourceBundle, messageHandler, strictHandlingUtilities.strictHandlingWarningMessages, strictHandlingUtilities, true);
      }
      return strictHandlingPromise;
    }
  }
  const operationsHelper = {
    renderMessageView: renderMessageView,
    fnOnStrictHandlingFailed: fnOnStrictHandlingFailed
  };
  return operationsHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,