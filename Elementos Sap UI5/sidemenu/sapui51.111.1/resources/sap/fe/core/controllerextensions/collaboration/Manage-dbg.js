/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/fe/core/converters/MetaModelConverter", "sap/m/MessageToast", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/library", "../../templating/PropertyHelper"], function (CollaborationCommon, MetaModelConverter, MessageToast, Core, Fragment, coreLibrary, PropertyHelper) {
  "use strict";

  var _exports = {};
  var isPathExpression = PropertyHelper.isPathExpression;
  var UserStatus = CollaborationCommon.UserStatus;
  var UserEditingState = CollaborationCommon.UserEditingState;
  var shareObject = CollaborationCommon.shareObject;
  var getText = CollaborationCommon.getText;
  var CollaborationUtils = CollaborationCommon.CollaborationUtils;
  const ValueState = coreLibrary.ValueState;
  const openManageDialog = async function (view) {
    let dialog = byId("dialog");
    if (!dialog) {
      dialog = await createManageCollaborationDialog(view);
    }
    await readInvitedUsers(view);
    dialog.open();
  };
  _exports.openManageDialog = openManageDialog;
  async function createManageCollaborationDialog(view) {
    const pDialog = view.getController().getExtensionAPI().loadFragment({
      name: "sap.fe.core.controllerextensions.collaboration.ManageDialog",
      id: "manageCollaborationDraft",
      controller: {
        share: share,
        addUser: addUser,
        removeUser: removeUser,
        close: closeDialog,
        addUserChanged: addUserChanged,
        formatUserStatus: formatUserStatus,
        formatUserStatusColor: formatUserStatusColor
      }
    });
    return pDialog.then(function (dialog) {
      view.addDependent(dialog);
      return dialog;
    }).catch(function () {
      throw "not this time";
    });
  }
  async function readInvitedUsers(view) {
    const model = view.getModel();
    // TODO: inform model colleagues on missing TS definition
    const parameters = {
      $select: "UserID,UserDescription,UserEditingState"
    };
    const invitedUserList = model.bindList("DraftAdministrativeData/DraftAdministrativeUser", view.getBindingContext(), [], [], parameters);
    const internalModelContext = view.getBindingContext("internal");
    // TODO: limit?
    return invitedUserList.requestContexts(0, 100).then(function (aContexts) {
      const invitedUsers = [];
      const activeUsers = view.getModel("internal").getProperty("/collaboration/activeUsers") || [];
      const me = CollaborationUtils.getMe(view);
      let userStatus;
      if ((aContexts === null || aContexts === void 0 ? void 0 : aContexts.length) > 0) {
        aContexts.forEach(function (oContext) {
          const userData = oContext.getObject();
          const isMe = (me === null || me === void 0 ? void 0 : me.id) === userData.UserID;
          const isActive = activeUsers.find(u => u.id === userData.UserID);
          let userDescription = userData.UserDescription || userData.UserID;
          const initials = CollaborationUtils.formatInitials(userDescription);
          userDescription += isMe ? ` (${CollaborationUtils.getText("C_COLLABORATIONDRAFT_YOU")})` : "";
          switch (userData.UserEditingState) {
            case UserEditingState.NoChanges:
              userStatus = isActive ? UserStatus.CurrentlyEditing : UserStatus.NoChangesMade;
              break;
            case UserEditingState.InProgress:
              userStatus = isActive ? UserStatus.CurrentlyEditing : UserStatus.ChangesMade;
              break;
            default:
              userStatus = UserStatus.NotYetInvited;
          }
          const user = {
            id: userData.UserID,
            name: userDescription,
            status: userStatus,
            color: CollaborationUtils.getUserColor(userData.UserID, activeUsers, invitedUsers),
            initials: initials,
            me: isMe
          };
          invitedUsers.push(user);
        });
      } else {
        //not yet shared, just add me
        invitedUsers.push(me);
      }
      internalModelContext.setProperty("collaboration/UserID", "");
      internalModelContext.setProperty("collaboration/UserDescription", "");
      internalModelContext.setProperty("collaboration/invitedUsers", invitedUsers);
    }).catch(function () {
      // TODO: handle this case, close dialog?
    });
  }
  _exports.readInvitedUsers = readInvitedUsers;
  function addUser(event) {
    const addButton = event.getSource();
    const internalModelContext = addButton.getBindingContext("internal");
    const invitedUsers = internalModelContext.getProperty("invitedUsers") || [];
    const activeUsers = addButton.getModel("internal").getProperty("/collaboration/activeUsers");
    const newUser = {
      id: internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty("UserID"),
      name: internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty("UserDescription")
    };
    if (!(invitedUsers.findIndex(user => user.id === newUser.id) > -1 || newUser.id === newUser.name && newUser.id === "")) {
      newUser.name = newUser.name || newUser.id;
      newUser.initials = CollaborationUtils.formatInitials(newUser.name);
      newUser.color = CollaborationUtils.getUserColor(newUser.id, activeUsers, invitedUsers);
      newUser.transient = true;
      newUser.status = UserStatus.NotYetInvited;
      invitedUsers.unshift(newUser);
      internalModelContext.setProperty("invitedUsers", invitedUsers);
      internalModelContext.setProperty("UserID", "");
      internalModelContext.setProperty("UserDescription", "");
    }
  }
  function addUserChanged(event) {
    const userInput = event.getSource();
    event.getParameter("promise").then(function (newUserId) {
      const internalModelContext = userInput.getBindingContext("internal");
      const invitedUsers = internalModelContext.getProperty("invitedUsers") || [];
      if (invitedUsers.findIndex(user => user.id === newUserId) > -1) {
        userInput.setValueState("Error");
        userInput.setValueStateText(getText("C_COLLABORATIONDRAFT_INVITATION_USER_ERROR"));
      } else {
        userInput.setValueState("None");
        userInput.setValueStateText("");
      }
    }).catch(function () {
      throw "User couldn't be determined at all";
    });
  }
  function removeUser(event) {
    removeUserFromList(event.getSource());
  }
  function removeUserFromList(item) {
    const internalModelContext = item.getBindingContext("pageInternal");
    const deleteUserID = item.getBindingContext("internal").getProperty("id");
    let invitedUsers = internalModelContext.getProperty("collaboration/invitedUsers");
    invitedUsers = invitedUsers.filter(user => user.id !== deleteUserID);
    internalModelContext.setProperty("collaboration/invitedUsers", invitedUsers);
  }
  function byId(id) {
    return Core.byId(`manageCollaborationDraft--${id}`);
  }
  function closeDialog() {
    byId("dialog").close();
  }
  function getSharedItemName(bindingContext) {
    var _dataModel$targetObje, _dataModel$targetObje2;
    const model = bindingContext.getModel();
    const metaModel = model.getMetaModel();
    const entityPath = metaModel.getMetaPath(bindingContext.getPath());
    const dataModel = MetaModelConverter.getInvolvedDataModelObjects(metaModel.getContext(entityPath));
    const headerInfo = (_dataModel$targetObje = dataModel.targetObject.entityType.annotations) === null || _dataModel$targetObje === void 0 ? void 0 : (_dataModel$targetObje2 = _dataModel$targetObje.UI) === null || _dataModel$targetObje2 === void 0 ? void 0 : _dataModel$targetObje2.HeaderInfo;
    let sharedItemName = "";
    const title = headerInfo === null || headerInfo === void 0 ? void 0 : headerInfo.Title;
    if (title) {
      sharedItemName = isPathExpression(title.Value) ? bindingContext.getProperty(title.Value.path) : title.Value;
    }
    return sharedItemName || (headerInfo === null || headerInfo === void 0 ? void 0 : headerInfo.TypeName) || "";
  }
  _exports.getSharedItemName = getSharedItemName;
  async function share(event) {
    const users = [];
    const source = event.getSource();
    const bindingContext = source.getBindingContext();
    const contexts = byId("userList").getBinding("items").getContexts();
    let numberOfNewInvitedUsers = 0;
    contexts.forEach(function (context) {
      users.push({
        UserID: context.getProperty("id"),
        UserAccessRole: "O" // For now according to UX every user retrieves the owner role
      });

      if (context.getObject().status === 0) {
        numberOfNewInvitedUsers++;
      }
    });
    try {
      await shareObject(bindingContext, users);
      MessageToast.show(getText("C_COLLABORATIONDRAFT_INVITATION_SUCCESS_TOAST", numberOfNewInvitedUsers.toString(), getSharedItemName(bindingContext)));
    } catch {
      MessageToast.show(getText("C_COLLABORATIONDRAFT_INVITATION_FAILED_TOAST"));
    }
    closeDialog();
  }
  _exports.share = share;
  async function showUserDetails(event, view) {
    const source = event.getSource();
    let popover = byId("userDetails");
    if (!popover) {
      popover = await createUserDetailsPopover(view);
    }
    popover.setBindingContext(source.getBindingContext("internal"), "internal");
    popover.openBy(source, false);
  }
  _exports.showUserDetails = showUserDetails;
  async function createUserDetailsPopover(view) {
    const popoverPromise = Fragment.load({
      id: "manageCollaborationDraft",
      // todo should be view id
      name: "sap.fe.core.controllerextensions.collaboration.UserDetails"
    });
    return popoverPromise.then(function (popover) {
      view.addDependent(popover);
      return popover;
    }).catch(function () {
      throw "not this time";
    });
  }
  function formatUserStatus(userStatus) {
    switch (userStatus) {
      case UserStatus.CurrentlyEditing:
        return getText("C_COLLABORATIONDRAFT_USER_CURRENTLY_EDITING");
      case UserStatus.ChangesMade:
        return getText("C_COLLABORATIONDRAFT_USER_CHANGES_MADE");
      case UserStatus.NoChangesMade:
        return getText("C_COLLABORATIONDRAFT_USER_NO_CHANGES_MADE");
      case UserStatus.NotYetInvited:
      default:
        return getText("C_COLLABORATIONDRAFT_USER_NOT_YET_INVITED");
    }
  }
  function formatUserStatusColor(userStatus) {
    switch (userStatus) {
      case UserStatus.CurrentlyEditing:
        return ValueState.Success;
      case UserStatus.ChangesMade:
        return ValueState.Warning;
      case UserStatus.NoChangesMade:
      case UserStatus.NotYetInvited:
      default:
        return ValueState.Information;
    }
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,