/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/base/util/UriParameters", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/ui/core/ws/SapPcpWebSocket"], function (Log, UriParameters, CollaborationCommon, SapPcpWebSocket) {
  "use strict";

  var _exports = {};
  var SUPPORTED_PROTOCOLS = SapPcpWebSocket.SUPPORTED_PROTOCOLS;
  var Activity = CollaborationCommon.Activity;
  const COLLABORATION = "/collaboration";
  const CONNECTED = "/collaboration/connected";
  const CONNECTION = "/collaboration/connection";
  const CURRENTDRAFTID = "/collaboration/DraftID";
  function isCollaborationConnected(internalModel) {
    return !!internalModel.getProperty(CONNECTED);
  }
  _exports.isCollaborationConnected = isCollaborationConnected;
  function initializeCollaboration(user, webSocketBaseURL, draftUUID, serviceUrl, internalModel, receiveCallback) {
    let sendUserInfo = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    if (internalModel.getProperty(CONNECTION)) {
      // A connection is already established
      if (internalModel.getProperty(CURRENTDRAFTID) === draftUUID) {
        // Connection corresponds to the same draft -> nothing to do
        return;
      } else {
        // There was a connection to another draft -> we close it before creating a new one
        // This can happen e.g. when switching between items in FCL
        endCollaboration(internalModel);
      }
    }
    const activeUsers = [user];
    internalModel.setProperty(COLLABORATION, {
      activeUsers: activeUsers,
      activities: {}
    });
    sendUserInfo = sendUserInfo || UriParameters.fromQuery(window.location.search).get("useFLPUser") === "true";
    const webSocket = createWebSocket(user, webSocketBaseURL, draftUUID, serviceUrl, sendUserInfo);
    internalModel.setProperty(CONNECTION, webSocket);
    internalModel.setProperty(CURRENTDRAFTID, draftUUID);
    webSocket.attachMessage(function (event) {
      const message = event.getParameter("pcpFields");
      receiveCallback(message);
    });
    webSocket.attachOpen(function () {
      internalModel.setProperty(CONNECTED, true);
    });
    webSocket.attachError(function () {
      Log.error(`The connection to the websocket channel ${webSocketBaseURL} could not be established`);
      internalModel.setProperty(CONNECTED, false);
    });
    webSocket.attachClose(function () {
      internalModel.setProperty(CONNECTED, false);
    });
  }
  _exports.initializeCollaboration = initializeCollaboration;
  function broadcastCollaborationMessage(action, content, internalModel, triggeredActionName) {
    if (isCollaborationConnected(internalModel)) {
      const webSocket = internalModel.getProperty(CONNECTION);
      webSocket.send("", {
        clientAction: action,
        clientContent: content,
        clientTriggeredActionName: triggeredActionName
      });
      if (action === Activity.Activate || action === Activity.Discard) {
        endCollaboration(internalModel);
      }
    }
  }
  _exports.broadcastCollaborationMessage = broadcastCollaborationMessage;
  function endCollaboration(internalModel) {
    const webSocket = internalModel.getProperty(CONNECTION);
    webSocket === null || webSocket === void 0 ? void 0 : webSocket.close();
    internalModel.setProperty(CONNECTION, null);
    internalModel.setProperty(CURRENTDRAFTID, undefined);
  }
  _exports.endCollaboration = endCollaboration;
  function createWebSocket(user, socketBaseURL, draftUUID, serviceUrl) {
    let sendUserInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    const hostLocation = window.location;
    let socketURI;

    // Support useBackendUrl for local testing
    const useBackendUrl = UriParameters.fromQuery(window.location.search).get("useBackendUrl");
    if (useBackendUrl) {
      socketURI = useBackendUrl.replace("https", "wss");
    } else {
      socketURI = hostLocation.protocol === "https:" ? "wss:" : "ws:";
      socketURI += `//${hostLocation.host}`;
    }
    socketURI += `${(socketBaseURL.startsWith("/") ? "" : "/") + socketBaseURL}?draft=${draftUUID}&relatedService=${serviceUrl}`;
    if (sendUserInfo) {
      socketURI += `&userID=${encodeURI(user.id)}&userName=${encodeURI(user.initialName || "")}`;
    }
    return new SapPcpWebSocket(socketURI, [SUPPORTED_PROTOCOLS.v10]);
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDT0xMQUJPUkFUSU9OIiwiQ09OTkVDVEVEIiwiQ09OTkVDVElPTiIsIkNVUlJFTlREUkFGVElEIiwiaXNDb2xsYWJvcmF0aW9uQ29ubmVjdGVkIiwiaW50ZXJuYWxNb2RlbCIsImdldFByb3BlcnR5IiwiaW5pdGlhbGl6ZUNvbGxhYm9yYXRpb24iLCJ1c2VyIiwid2ViU29ja2V0QmFzZVVSTCIsImRyYWZ0VVVJRCIsInNlcnZpY2VVcmwiLCJyZWNlaXZlQ2FsbGJhY2siLCJzZW5kVXNlckluZm8iLCJlbmRDb2xsYWJvcmF0aW9uIiwiYWN0aXZlVXNlcnMiLCJzZXRQcm9wZXJ0eSIsImFjdGl2aXRpZXMiLCJVcmlQYXJhbWV0ZXJzIiwiZnJvbVF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJ3ZWJTb2NrZXQiLCJjcmVhdGVXZWJTb2NrZXQiLCJhdHRhY2hNZXNzYWdlIiwiZXZlbnQiLCJtZXNzYWdlIiwiZ2V0UGFyYW1ldGVyIiwiYXR0YWNoT3BlbiIsImF0dGFjaEVycm9yIiwiTG9nIiwiZXJyb3IiLCJhdHRhY2hDbG9zZSIsImJyb2FkY2FzdENvbGxhYm9yYXRpb25NZXNzYWdlIiwiYWN0aW9uIiwiY29udGVudCIsInRyaWdnZXJlZEFjdGlvbk5hbWUiLCJzZW5kIiwiY2xpZW50QWN0aW9uIiwiY2xpZW50Q29udGVudCIsImNsaWVudFRyaWdnZXJlZEFjdGlvbk5hbWUiLCJBY3Rpdml0eSIsIkFjdGl2YXRlIiwiRGlzY2FyZCIsImNsb3NlIiwidW5kZWZpbmVkIiwic29ja2V0QmFzZVVSTCIsImhvc3RMb2NhdGlvbiIsInNvY2tldFVSSSIsInVzZUJhY2tlbmRVcmwiLCJyZXBsYWNlIiwicHJvdG9jb2wiLCJob3N0Iiwic3RhcnRzV2l0aCIsImVuY29kZVVSSSIsImlkIiwiaW5pdGlhbE5hbWUiLCJTYXBQY3BXZWJTb2NrZXQiLCJTVVBQT1JURURfUFJPVE9DT0xTIiwidjEwIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJBY3Rpdml0eUJhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZyBmcm9tIFwic2FwL2Jhc2UvTG9nXCI7XG5pbXBvcnQgVXJpUGFyYW1ldGVycyBmcm9tIFwic2FwL2Jhc2UvdXRpbC9VcmlQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgdHlwZSB7IE1lc3NhZ2UsIFVzZXIgfSBmcm9tIFwic2FwL2ZlL2NvcmUvY29udHJvbGxlcmV4dGVuc2lvbnMvY29sbGFib3JhdGlvbi9Db2xsYWJvcmF0aW9uQ29tbW9uXCI7XG5pbXBvcnQgeyBBY3Rpdml0eSB9IGZyb20gXCJzYXAvZmUvY29yZS9jb250cm9sbGVyZXh0ZW5zaW9ucy9jb2xsYWJvcmF0aW9uL0NvbGxhYm9yYXRpb25Db21tb25cIjtcbmltcG9ydCB0eXBlIEV2ZW50IGZyb20gXCJzYXAvdWkvYmFzZS9FdmVudFwiO1xuaW1wb3J0IFNhcFBjcFdlYlNvY2tldCwgeyBTVVBQT1JURURfUFJPVE9DT0xTIH0gZnJvbSBcInNhcC91aS9jb3JlL3dzL1NhcFBjcFdlYlNvY2tldFwiO1xuaW1wb3J0IHR5cGUgSlNPTk1vZGVsIGZyb20gXCJzYXAvdWkvbW9kZWwvanNvbi9KU09OTW9kZWxcIjtcblxuY29uc3QgQ09MTEFCT1JBVElPTiA9IFwiL2NvbGxhYm9yYXRpb25cIjtcbmNvbnN0IENPTk5FQ1RFRCA9IFwiL2NvbGxhYm9yYXRpb24vY29ubmVjdGVkXCI7XG5jb25zdCBDT05ORUNUSU9OID0gXCIvY29sbGFib3JhdGlvbi9jb25uZWN0aW9uXCI7XG5jb25zdCBDVVJSRU5URFJBRlRJRCA9IFwiL2NvbGxhYm9yYXRpb24vRHJhZnRJRFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb2xsYWJvcmF0aW9uQ29ubmVjdGVkKGludGVybmFsTW9kZWw6IEpTT05Nb2RlbCk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gISFpbnRlcm5hbE1vZGVsLmdldFByb3BlcnR5KENPTk5FQ1RFRCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplQ29sbGFib3JhdGlvbihcblx0dXNlcjogVXNlcixcblx0d2ViU29ja2V0QmFzZVVSTDogc3RyaW5nLFxuXHRkcmFmdFVVSUQ6IHN0cmluZyxcblx0c2VydmljZVVybDogc3RyaW5nLFxuXHRpbnRlcm5hbE1vZGVsOiBKU09OTW9kZWwsXG5cdHJlY2VpdmVDYWxsYmFjazogKF86IE1lc3NhZ2UpID0+IHZvaWQsXG5cdHNlbmRVc2VySW5mbyA9IGZhbHNlXG4pIHtcblx0aWYgKGludGVybmFsTW9kZWwuZ2V0UHJvcGVydHkoQ09OTkVDVElPTikpIHtcblx0XHQvLyBBIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBlc3RhYmxpc2hlZFxuXHRcdGlmIChpbnRlcm5hbE1vZGVsLmdldFByb3BlcnR5KENVUlJFTlREUkFGVElEKSA9PT0gZHJhZnRVVUlEKSB7XG5cdFx0XHQvLyBDb25uZWN0aW9uIGNvcnJlc3BvbmRzIHRvIHRoZSBzYW1lIGRyYWZ0IC0+IG5vdGhpbmcgdG8gZG9cblx0XHRcdHJldHVybjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVGhlcmUgd2FzIGEgY29ubmVjdGlvbiB0byBhbm90aGVyIGRyYWZ0IC0+IHdlIGNsb3NlIGl0IGJlZm9yZSBjcmVhdGluZyBhIG5ldyBvbmVcblx0XHRcdC8vIFRoaXMgY2FuIGhhcHBlbiBlLmcuIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gaXRlbXMgaW4gRkNMXG5cdFx0XHRlbmRDb2xsYWJvcmF0aW9uKGludGVybmFsTW9kZWwpO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGFjdGl2ZVVzZXJzOiBVc2VyW10gPSBbdXNlcl07XG5cdGludGVybmFsTW9kZWwuc2V0UHJvcGVydHkoQ09MTEFCT1JBVElPTiwgeyBhY3RpdmVVc2VyczogYWN0aXZlVXNlcnMsIGFjdGl2aXRpZXM6IHt9IH0pO1xuXG5cdHNlbmRVc2VySW5mbyA9IHNlbmRVc2VySW5mbyB8fCBVcmlQYXJhbWV0ZXJzLmZyb21RdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoXCJ1c2VGTFBVc2VyXCIpID09PSBcInRydWVcIjtcblxuXHRjb25zdCB3ZWJTb2NrZXQgPSBjcmVhdGVXZWJTb2NrZXQodXNlciwgd2ViU29ja2V0QmFzZVVSTCwgZHJhZnRVVUlELCBzZXJ2aWNlVXJsLCBzZW5kVXNlckluZm8pO1xuXG5cdGludGVybmFsTW9kZWwuc2V0UHJvcGVydHkoQ09OTkVDVElPTiwgd2ViU29ja2V0KTtcblx0aW50ZXJuYWxNb2RlbC5zZXRQcm9wZXJ0eShDVVJSRU5URFJBRlRJRCwgZHJhZnRVVUlEKTtcblxuXHR3ZWJTb2NrZXQuYXR0YWNoTWVzc2FnZShmdW5jdGlvbiAoZXZlbnQ6IEV2ZW50KSB7XG5cdFx0Y29uc3QgbWVzc2FnZTogTWVzc2FnZSA9IGV2ZW50LmdldFBhcmFtZXRlcihcInBjcEZpZWxkc1wiKTtcblx0XHRyZWNlaXZlQ2FsbGJhY2sobWVzc2FnZSk7XG5cdH0pO1xuXG5cdHdlYlNvY2tldC5hdHRhY2hPcGVuKGZ1bmN0aW9uICgpIHtcblx0XHRpbnRlcm5hbE1vZGVsLnNldFByb3BlcnR5KENPTk5FQ1RFRCwgdHJ1ZSk7XG5cdH0pO1xuXG5cdHdlYlNvY2tldC5hdHRhY2hFcnJvcihmdW5jdGlvbiAoKSB7XG5cdFx0TG9nLmVycm9yKGBUaGUgY29ubmVjdGlvbiB0byB0aGUgd2Vic29ja2V0IGNoYW5uZWwgJHt3ZWJTb2NrZXRCYXNlVVJMfSBjb3VsZCBub3QgYmUgZXN0YWJsaXNoZWRgKTtcblx0XHRpbnRlcm5hbE1vZGVsLnNldFByb3BlcnR5KENPTk5FQ1RFRCwgZmFsc2UpO1xuXHR9KTtcblxuXHR3ZWJTb2NrZXQuYXR0YWNoQ2xvc2UoZnVuY3Rpb24gKCkge1xuXHRcdGludGVybmFsTW9kZWwuc2V0UHJvcGVydHkoQ09OTkVDVEVELCBmYWxzZSk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJvYWRjYXN0Q29sbGFib3JhdGlvbk1lc3NhZ2UoXG5cdGFjdGlvbjogQWN0aXZpdHksXG5cdGNvbnRlbnQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcblx0aW50ZXJuYWxNb2RlbDogSlNPTk1vZGVsLFxuXHR0cmlnZ2VyZWRBY3Rpb25OYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4pIHtcblx0aWYgKGlzQ29sbGFib3JhdGlvbkNvbm5lY3RlZChpbnRlcm5hbE1vZGVsKSkge1xuXHRcdGNvbnN0IHdlYlNvY2tldCA9IGludGVybmFsTW9kZWwuZ2V0UHJvcGVydHkoQ09OTkVDVElPTikgYXMgU2FwUGNwV2ViU29ja2V0O1xuXG5cdFx0d2ViU29ja2V0LnNlbmQoXCJcIiwge1xuXHRcdFx0Y2xpZW50QWN0aW9uOiBhY3Rpb24sXG5cdFx0XHRjbGllbnRDb250ZW50OiBjb250ZW50LFxuXHRcdFx0Y2xpZW50VHJpZ2dlcmVkQWN0aW9uTmFtZTogdHJpZ2dlcmVkQWN0aW9uTmFtZVxuXHRcdH0pO1xuXG5cdFx0aWYgKGFjdGlvbiA9PT0gQWN0aXZpdHkuQWN0aXZhdGUgfHwgYWN0aW9uID09PSBBY3Rpdml0eS5EaXNjYXJkKSB7XG5cdFx0XHRlbmRDb2xsYWJvcmF0aW9uKGludGVybmFsTW9kZWwpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5kQ29sbGFib3JhdGlvbihpbnRlcm5hbE1vZGVsOiBKU09OTW9kZWwpIHtcblx0Y29uc3Qgd2ViU29ja2V0ID0gaW50ZXJuYWxNb2RlbC5nZXRQcm9wZXJ0eShDT05ORUNUSU9OKSBhcyBTYXBQY3BXZWJTb2NrZXQ7XG5cdHdlYlNvY2tldD8uY2xvc2UoKTtcblx0aW50ZXJuYWxNb2RlbC5zZXRQcm9wZXJ0eShDT05ORUNUSU9OLCBudWxsKTtcblx0aW50ZXJuYWxNb2RlbC5zZXRQcm9wZXJ0eShDVVJSRU5URFJBRlRJRCwgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0KHVzZXI6IFVzZXIsIHNvY2tldEJhc2VVUkw6IHN0cmluZywgZHJhZnRVVUlEOiBzdHJpbmcsIHNlcnZpY2VVcmw6IHN0cmluZywgc2VuZFVzZXJJbmZvID0gZmFsc2UpIHtcblx0Y29uc3QgaG9zdExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXHRsZXQgc29ja2V0VVJJO1xuXG5cdC8vIFN1cHBvcnQgdXNlQmFja2VuZFVybCBmb3IgbG9jYWwgdGVzdGluZ1xuXHRjb25zdCB1c2VCYWNrZW5kVXJsID0gVXJpUGFyYW1ldGVycy5mcm9tUXVlcnkod2luZG93LmxvY2F0aW9uLnNlYXJjaCkuZ2V0KFwidXNlQmFja2VuZFVybFwiKTtcblx0aWYgKHVzZUJhY2tlbmRVcmwpIHtcblx0XHRzb2NrZXRVUkkgPSB1c2VCYWNrZW5kVXJsLnJlcGxhY2UoXCJodHRwc1wiLCBcIndzc1wiKTtcblx0fSBlbHNlIHtcblx0XHRzb2NrZXRVUkkgPSBob3N0TG9jYXRpb24ucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIgPyBcIndzczpcIiA6IFwid3M6XCI7XG5cdFx0c29ja2V0VVJJICs9IGAvLyR7aG9zdExvY2F0aW9uLmhvc3R9YDtcblx0fVxuXG5cdHNvY2tldFVSSSArPSBgJHsoc29ja2V0QmFzZVVSTC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiXCIgOiBcIi9cIikgKyBzb2NrZXRCYXNlVVJMfT9kcmFmdD0ke2RyYWZ0VVVJRH0mcmVsYXRlZFNlcnZpY2U9JHtzZXJ2aWNlVXJsfWA7XG5cblx0aWYgKHNlbmRVc2VySW5mbykge1xuXHRcdHNvY2tldFVSSSArPSBgJnVzZXJJRD0ke2VuY29kZVVSSSh1c2VyLmlkKX0mdXNlck5hbWU9JHtlbmNvZGVVUkkodXNlci5pbml0aWFsTmFtZSB8fCBcIlwiKX1gO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBTYXBQY3BXZWJTb2NrZXQoc29ja2V0VVJJLCBbU1VQUE9SVEVEX1BST1RPQ09MUy52MTBdKTtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFBQTs7Ozs7OztFQVFBLE1BQU1BLGFBQWEsR0FBRyxnQkFBZ0I7RUFDdEMsTUFBTUMsU0FBUyxHQUFHLDBCQUEwQjtFQUM1QyxNQUFNQyxVQUFVLEdBQUcsMkJBQTJCO0VBQzlDLE1BQU1DLGNBQWMsR0FBRyx3QkFBd0I7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