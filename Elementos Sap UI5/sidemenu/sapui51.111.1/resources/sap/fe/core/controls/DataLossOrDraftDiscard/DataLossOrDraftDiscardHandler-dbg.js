/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/model/json/JSONModel"], function (Log, Fragment, XMLPreprocessor, XMLTemplateProcessor, JSONModel) {
  "use strict";

  var _exports = {};
  var DraftDataLossOptions;
  (function (DraftDataLossOptions) {
    DraftDataLossOptions["Save"] = "draftDataLossOptionSave";
    DraftDataLossOptions["Keep"] = "draftDataLossOptionKeep";
    DraftDataLossOptions["Discard"] = "draftDataLossOptionDiscard";
  })(DraftDataLossOptions || (DraftDataLossOptions = {}));
  let onDataLossConfirmedFollowUpFunction;
  let onDataLossCancelFollowUpFunction;
  function fnDataLossConfirmation(fnOnDataLossOk, fnOnDataLossCancel, controller, skipBindingToView) {
    // Open the data loss popup and after processing the selected function finally call
    // onDataLossConfirmed which resolves the promise and leads to processing of the originally
    // triggered action like e.g. a back navigation
    let dataLossPopup;
    onDataLossConfirmedFollowUpFunction = fnOnDataLossOk;
    onDataLossCancelFollowUpFunction = fnOnDataLossCancel;
    const fragmentName = "sap.fe.core.controls.DataLossOrDraftDiscard.DataLossDraft";
    const view = controller.getView();
    const fragmentController = {
      onDataLossOk: function () {
        handleDataLossOk(dataLossPopup, controller, onDataLossConfirmedFollowUpFunction, skipBindingToView);
      },
      onDataLossCancel: function () {
        onDataLossCancelFollowUpFunction();
        dataLossPopup.close();
      },
      setDataLossPopup: function (inDataLossPopup) {
        controller.dataLossPopup = inDataLossPopup;
      }
    };
    const localThisModel = new JSONModel({}),
      preprocessorSettings = {
        bindingContexts: {
          this: localThisModel.createBindingContext("/")
        },
        models: {
          this: localThisModel
        }
      };
    if (controller.dataLossPopup) {
      dataLossPopup = controller.dataLossPopup;
      dataLossPopup.open();
      selectAndFocusFirstEntry(dataLossPopup);
    } else {
      const dialogFragment = XMLTemplateProcessor.loadTemplate(fragmentName, "fragment");
      Promise.resolve(XMLPreprocessor.process(dialogFragment, {
        name: fragmentName
      }, preprocessorSettings)).then(fragment => {
        return Fragment.load({
          definition: fragment,
          controller: fragmentController
        });
      }).then(popup => {
        dataLossPopup = popup;
        selectAndFocusFirstEntry(dataLossPopup);
        popup.addEventDelegate({
          onsapenter: function () {
            handleDataLossOk(dataLossPopup, controller, onDataLossConfirmedFollowUpFunction, skipBindingToView);
          }
        });
        view.addDependent(dataLossPopup);
        dataLossPopup.open();
        fragmentController.setDataLossPopup(dataLossPopup);
      }).catch(function (error) {
        Log.error("Error while opening the Discard Dialog fragment", error);
      });
    }
  }
  function performAfterDiscardorKeepDraft(processFunctionOnDatalossOk, processFunctionOnDatalossCancel, controller, skipBindingToView) {
    // Depending on if the user closed the data loss popup with Ok or Cancel,
    // execute the provided follow-up function and resolve or reject the promise
    return new Promise(function (resolve, reject) {
      const dataLossPopupOk = function (context) {
        const returnValue = processFunctionOnDatalossOk(context);
        resolve(returnValue);
      };
      const dataLossPopupCancel = function () {
        processFunctionOnDatalossCancel();
        reject();
      };
      fnDataLossConfirmation(dataLossPopupOk, dataLossPopupCancel, controller, skipBindingToView);
    });
  }
  _exports.performAfterDiscardorKeepDraft = performAfterDiscardorKeepDraft;
  function discardDraft(controller, skipBindingToView) {
    const context = controller.getView().getBindingContext();
    const params = {
      skipBackNavigation: true,
      skipDiscardPopover: true,
      skipBindingToView: skipBindingToView !== undefined ? skipBindingToView : true
    };
    return controller.editFlow.cancelDocument(context, params);
  }
  _exports.discardDraft = discardDraft;
  function saveDocument(controller) {
    const context = controller.getView().getBindingContext();
    // We check if we are on the OP and then call the internal _saveDocument from the OP controller
    // since here some special handling is done for creationRow before editFlow.saveDocument is called.
    // In case of a custom controller we directly call saveDocument from the editFlow
    if (controller.isA("sap.fe.templates.ObjectPage.ObjectPageController")) {
      return controller._saveDocument(context);
    } else {
      return controller.editFlow.saveDocument(context);
    }
  }
  _exports.saveDocument = saveDocument;
  function getSelectedKey(dataLossPopup) {
    // For not using control IDs we introduced customData in the fragment and
    // use it here for finding the correct list in the dialog and for
    // determining the selected option from the list
    const dataLossOptionsList = dataLossPopup.getContent().find(element => element.data("listIdentifier") === "draftDataLossOptionsList");
    return dataLossOptionsList.getSelectedItem().data("itemKey");
  }
  _exports.getSelectedKey = getSelectedKey;
  function selectAndFocusFirstEntry(dataLossPopup) {
    // For not using control IDs we introduced customData in the fragment and
    // use it here for finding the correct list in the dialog.
    const dataLossOptionsList = dataLossPopup.getContent().find(element => element.data("listIdentifier") === "draftDataLossOptionsList");
    // Preselect the first entry in the list
    const firstListItemOption = dataLossOptionsList.getItems()[0];
    dataLossOptionsList.setSelectedItem(firstListItemOption);
    // By default set the focus on the first list item of the dialog
    // We do not set the focus on the button, but catch the ENTER key in the dialog
    // and process it as Ok, since focusing the button was reported as an ACC issue
    firstListItemOption === null || firstListItemOption === void 0 ? void 0 : firstListItemOption.focus();
  }

  /**
   * Executes the logic when the data loss dialog is confirmed.
   *
   * @param dataLossPopup Reference to the data loss dialog
   * @param controller Reference to the controller
   * @param dataLossConfirmationFollowUpFunction The action to be performed after the selected option has been executed
   * @param skipBindingToView Forwarded to discardDraft
   */
  _exports.selectAndFocusFirstEntry = selectAndFocusFirstEntry;
  function handleDataLossOk(dataLossPopup, controller, dataLossConfirmationFollowUpFunction, skipBindingToView) {
    const selectedKey = getSelectedKey(dataLossPopup);
    if (selectedKey === DraftDataLossOptions.Save) {
      saveDocument(controller).then(dataLossConfirmationFollowUpFunction).catch(function (error) {
        Log.error("Error while saving document", error);
      });
      dataLossPopup.close();
    } else if (selectedKey === DraftDataLossOptions.Keep) {
      dataLossConfirmationFollowUpFunction();
      dataLossPopup.close();
    } else if (selectedKey === DraftDataLossOptions.Discard) {
      discardDraft(controller, skipBindingToView).then(dataLossConfirmationFollowUpFunction).catch(function (error) {
        Log.error("Error while discarding draft", error);
      });
      dataLossPopup.close();
    }
  }
  _exports.handleDataLossOk = handleDataLossOk;
  return {
    performAfterDiscardorKeepDraft,
    discardDraft,
    saveDocument,
    getSelectedKey,
    selectAndFocusFirstEntry
  };
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,