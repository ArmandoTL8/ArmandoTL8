/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["@sap-ux/jest-mock-ui5/dist/generic", "sap/fe/core/controllerextensions/InternalEditFlow", "sap/fe/core/PageController", "sap/ui/mdc/FilterBar"], function (generic, InternalEditFlow, PageController, FilterBar) {
  "use strict";

  var _exports = {};
  var mock = generic.mock;
  function mockListReportController() {
    // manually add ListReportController.controller functions since I am unable to import the prototype
    const listReport = {
      _getFilterBarControl: jest.fn(),
      _getControls: jest.fn(),
      _isFilterBarHidden: jest.fn(),
      _isMultiMode: jest.fn(),
      _getMultiModeControl: jest.fn(),
      _getFilterBarVariantControl: jest.fn(),
      _hasMultiVisualizations: jest.fn(),
      _shouldAutoTriggerSearch: jest.fn(),
      _getTable: jest.fn(),
      getExtensionAPI: jest.fn(),
      _editFlow: mock(InternalEditFlow),
      getChartControl: jest.fn()
    };
    return Object.assign(mock(PageController), listReport);
  }
  _exports.mockListReportController = mockListReportController;
  function mockObjectPageController() {
    // manually add ListReportController.controller functions since I am unable to import the prototype
    const objectPage = {
      getStickyEditMode: jest.fn(),
      getExtensionAPI: jest.fn(),
      _editFlow: mock(InternalEditFlow)
    };
    return Object.assign(mock(PageController), objectPage);
  }
  _exports.mockObjectPageController = mockObjectPageController;
  function mockContextForExtension(extension, controller, base) {
    const view = controller.getView();
    extension.getView = () => view;
    const mockedBase = mock(base || {});
    return Object.assign(mockedBase, extension);
  }
  _exports.mockContextForExtension = mockContextForExtension;
  function mockFilterBar() {
    const filterBar = mock(FilterBar);
    filterBar.mock.waitForInitialization = jest.fn();
    return filterBar;
  }
  _exports.mockFilterBar = mockFilterBar;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrTGlzdFJlcG9ydENvbnRyb2xsZXIiLCJsaXN0UmVwb3J0IiwiX2dldEZpbHRlckJhckNvbnRyb2wiLCJqZXN0IiwiZm4iLCJfZ2V0Q29udHJvbHMiLCJfaXNGaWx0ZXJCYXJIaWRkZW4iLCJfaXNNdWx0aU1vZGUiLCJfZ2V0TXVsdGlNb2RlQ29udHJvbCIsIl9nZXRGaWx0ZXJCYXJWYXJpYW50Q29udHJvbCIsIl9oYXNNdWx0aVZpc3VhbGl6YXRpb25zIiwiX3Nob3VsZEF1dG9UcmlnZ2VyU2VhcmNoIiwiX2dldFRhYmxlIiwiZ2V0RXh0ZW5zaW9uQVBJIiwiX2VkaXRGbG93IiwibW9jayIsIkludGVybmFsRWRpdEZsb3ciLCJnZXRDaGFydENvbnRyb2wiLCJPYmplY3QiLCJhc3NpZ24iLCJQYWdlQ29udHJvbGxlciIsIm1vY2tPYmplY3RQYWdlQ29udHJvbGxlciIsIm9iamVjdFBhZ2UiLCJnZXRTdGlja3lFZGl0TW9kZSIsIm1vY2tDb250ZXh0Rm9yRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwiY29udHJvbGxlciIsImJhc2UiLCJ2aWV3IiwiZ2V0VmlldyIsIm1vY2tlZEJhc2UiLCJtb2NrRmlsdGVyQmFyIiwiZmlsdGVyQmFyIiwiRmlsdGVyQmFyIiwid2FpdEZvckluaXRpYWxpemF0aW9uIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJGZU1vY2tzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTW9ja2VkSW5zdGFuY2UsIFVJNUluc3RhbmNlVHlwZSwgV2l0aE1vY2sgfSBmcm9tIFwiQHNhcC11eC9qZXN0LW1vY2stdWk1L2Rpc3QvZ2VuZXJpY1wiO1xuaW1wb3J0IHsgbW9jayB9IGZyb20gXCJAc2FwLXV4L2plc3QtbW9jay11aTUvZGlzdC9nZW5lcmljXCI7XG5pbXBvcnQgSW50ZXJuYWxFZGl0RmxvdyBmcm9tIFwic2FwL2ZlL2NvcmUvY29udHJvbGxlcmV4dGVuc2lvbnMvSW50ZXJuYWxFZGl0Rmxvd1wiO1xuaW1wb3J0IFBhZ2VDb250cm9sbGVyIGZyb20gXCJzYXAvZmUvY29yZS9QYWdlQ29udHJvbGxlclwiO1xuaW1wb3J0IHR5cGUgQ29udHJvbGxlciBmcm9tIFwic2FwL3VpL2NvcmUvbXZjL0NvbnRyb2xsZXJcIjtcbmltcG9ydCBGaWx0ZXJCYXIgZnJvbSBcInNhcC91aS9tZGMvRmlsdGVyQmFyXCI7XG5cbmludGVyZmFjZSBDb21tb25Db250cm9sbGVyVHlwZSB7XG5cdGdldEV4dGVuc2lvbkFQSTogYW55O1xuXHRfZWRpdEZsb3c6IFdpdGhNb2NrPEludGVybmFsRWRpdEZsb3c+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpc3RSZXBvcnRDb250cm9sbGVyVHlwZSB7XG5cdF9nZXRGaWx0ZXJCYXJDb250cm9sOiBhbnk7XG5cdF9nZXRDb250cm9sczogYW55O1xuXHRfaXNGaWx0ZXJCYXJIaWRkZW46IGFueTtcblx0X2lzTXVsdGlNb2RlOiBhbnk7XG5cdF9nZXRNdWx0aU1vZGVDb250cm9sOiBhbnk7XG5cdF9nZXRGaWx0ZXJCYXJWYXJpYW50Q29udHJvbDogYW55O1xuXHRfaGFzTXVsdGlWaXN1YWxpemF0aW9uczogYW55O1xuXHRfc2hvdWxkQXV0b1RyaWdnZXJTZWFyY2g6IGFueTtcblx0X2dldFRhYmxlOiBhbnk7XG5cdGdldENoYXJ0Q29udHJvbDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdFBhZ2VDb250cm9sbGVyVHlwZSB7XG5cdGdldFN0aWNreUVkaXRNb2RlOiBhbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrTGlzdFJlcG9ydENvbnRyb2xsZXIoKTogV2l0aE1vY2s8Q29udHJvbGxlciAmIFBhZ2VDb250cm9sbGVyICYgTGlzdFJlcG9ydENvbnRyb2xsZXJUeXBlICYgQ29tbW9uQ29udHJvbGxlclR5cGU+IHtcblx0Ly8gbWFudWFsbHkgYWRkIExpc3RSZXBvcnRDb250cm9sbGVyLmNvbnRyb2xsZXIgZnVuY3Rpb25zIHNpbmNlIEkgYW0gdW5hYmxlIHRvIGltcG9ydCB0aGUgcHJvdG90eXBlXG5cdGNvbnN0IGxpc3RSZXBvcnQ6IE1vY2tlZEluc3RhbmNlPExpc3RSZXBvcnRDb250cm9sbGVyVHlwZSAmIENvbW1vbkNvbnRyb2xsZXJUeXBlPiA9IHtcblx0XHRfZ2V0RmlsdGVyQmFyQ29udHJvbDogamVzdC5mbigpLFxuXHRcdF9nZXRDb250cm9sczogamVzdC5mbigpLFxuXHRcdF9pc0ZpbHRlckJhckhpZGRlbjogamVzdC5mbigpLFxuXHRcdF9pc011bHRpTW9kZTogamVzdC5mbigpLFxuXHRcdF9nZXRNdWx0aU1vZGVDb250cm9sOiBqZXN0LmZuKCksXG5cdFx0X2dldEZpbHRlckJhclZhcmlhbnRDb250cm9sOiBqZXN0LmZuKCksXG5cdFx0X2hhc011bHRpVmlzdWFsaXphdGlvbnM6IGplc3QuZm4oKSxcblx0XHRfc2hvdWxkQXV0b1RyaWdnZXJTZWFyY2g6IGplc3QuZm4oKSxcblx0XHRfZ2V0VGFibGU6IGplc3QuZm4oKSxcblx0XHRnZXRFeHRlbnNpb25BUEk6IGplc3QuZm4oKSxcblx0XHRfZWRpdEZsb3c6IG1vY2soSW50ZXJuYWxFZGl0RmxvdykgYXMgYW55LFxuXHRcdGdldENoYXJ0Q29udHJvbDogamVzdC5mbigpXG5cdH07XG5cdHJldHVybiBPYmplY3QuYXNzaWduKG1vY2soUGFnZUNvbnRyb2xsZXIpIGFzIGFueSwgbGlzdFJlcG9ydCkgYXMgV2l0aE1vY2s8XG5cdFx0Q29udHJvbGxlciAmIFBhZ2VDb250cm9sbGVyICYgTGlzdFJlcG9ydENvbnRyb2xsZXJUeXBlICYgQ29tbW9uQ29udHJvbGxlclR5cGVcblx0Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tPYmplY3RQYWdlQ29udHJvbGxlcigpOiBXaXRoTW9jazxDb250cm9sbGVyICYgUGFnZUNvbnRyb2xsZXIgJiBPYmplY3RQYWdlQ29udHJvbGxlclR5cGUgJiBDb21tb25Db250cm9sbGVyVHlwZT4ge1xuXHQvLyBtYW51YWxseSBhZGQgTGlzdFJlcG9ydENvbnRyb2xsZXIuY29udHJvbGxlciBmdW5jdGlvbnMgc2luY2UgSSBhbSB1bmFibGUgdG8gaW1wb3J0IHRoZSBwcm90b3R5cGVcblx0Y29uc3Qgb2JqZWN0UGFnZTogTW9ja2VkSW5zdGFuY2U8T2JqZWN0UGFnZUNvbnRyb2xsZXJUeXBlICYgQ29tbW9uQ29udHJvbGxlclR5cGU+ID0ge1xuXHRcdGdldFN0aWNreUVkaXRNb2RlOiBqZXN0LmZuKCksXG5cdFx0Z2V0RXh0ZW5zaW9uQVBJOiBqZXN0LmZuKCksXG5cdFx0X2VkaXRGbG93OiBtb2NrKEludGVybmFsRWRpdEZsb3cpIGFzIGFueVxuXHR9O1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihtb2NrKFBhZ2VDb250cm9sbGVyKSBhcyBhbnksIG9iamVjdFBhZ2UpIGFzIFdpdGhNb2NrPFxuXHRcdENvbnRyb2xsZXIgJiBQYWdlQ29udHJvbGxlciAmIE9iamVjdFBhZ2VDb250cm9sbGVyVHlwZSAmIENvbW1vbkNvbnRyb2xsZXJUeXBlXG5cdD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQ29udGV4dEZvckV4dGVuc2lvbjxFWFQgZXh0ZW5kcyBvYmplY3QsIEJBU0UgZXh0ZW5kcyBvYmplY3Q+KFxuXHRleHRlbnNpb246IEVYVCxcblx0Y29udHJvbGxlcjogV2l0aE1vY2s8Q29udHJvbGxlcj4sXG5cdGJhc2U/OiBCQVNFXG4pOiBXaXRoTW9jazxFWFQgJiBVSTVJbnN0YW5jZVR5cGU8QkFTRT4+IHtcblx0Y29uc3QgdmlldyA9IGNvbnRyb2xsZXIuZ2V0VmlldygpO1xuXHQoZXh0ZW5zaW9uIGFzIGFueSkuZ2V0VmlldyA9ICgpID0+IHZpZXc7XG5cdGNvbnN0IG1vY2tlZEJhc2UgPSBtb2NrKGJhc2UgfHwge30pO1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihtb2NrZWRCYXNlLCBleHRlbnNpb24pIGFzIFdpdGhNb2NrPEVYVCAmIFVJNUluc3RhbmNlVHlwZTxCQVNFPj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrRmlsdGVyQmFyKCk6IFdpdGhNb2NrPFxuXHRGaWx0ZXJCYXIgJiB7IHdhaXRGb3JJbml0aWFsaXphdGlvbjogRnVuY3Rpb247IF9iU2VhcmNoVHJpZ2dlcmVkOiBCb29sZWFuOyBfZ2V0Q29uZGl0aW9uTW9kZWw6IEZ1bmN0aW9uIH1cbj4ge1xuXHRjb25zdCBmaWx0ZXJCYXIgPSBtb2NrKEZpbHRlckJhcikgYXMgV2l0aE1vY2s8XG5cdFx0RmlsdGVyQmFyICYgeyB3YWl0Rm9ySW5pdGlhbGl6YXRpb246IEZ1bmN0aW9uOyBfYlNlYXJjaFRyaWdnZXJlZDogQm9vbGVhbjsgX2dldENvbmRpdGlvbk1vZGVsOiBGdW5jdGlvbiB9XG5cdD47XG5cdGZpbHRlckJhci5tb2NrLndhaXRGb3JJbml0aWFsaXphdGlvbiA9IGplc3QuZm4oKTtcblx0cmV0dXJuIGZpbHRlckJhcjtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFBQTs7Ozs7O0VBNkJPLFNBQVNBLHdCQUF3QixHQUE0RjtJQUNuSTtJQUNBLE1BQU1DLFVBQTJFLEdBQUc7TUFDbkZDLG9CQUFvQixFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMvQkMsWUFBWSxFQUFFRixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUN2QkUsa0JBQWtCLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQzdCRyxZQUFZLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ3ZCSSxvQkFBb0IsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDL0JLLDJCQUEyQixFQUFFTixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUN0Q00sdUJBQXVCLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ2xDTyx3QkFBd0IsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDbkNRLFNBQVMsRUFBRVQsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDcEJTLGVBQWUsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDMUJVLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBUTtNQUN4Q0MsZUFBZSxFQUFFZCxJQUFJLENBQUNDLEVBQUU7SUFDekIsQ0FBQztJQUNELE9BQU9jLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixJQUFJLENBQUNLLGNBQWMsQ0FBQyxFQUFTbkIsVUFBVSxDQUFDO0VBRzlEO0VBQUM7RUFFTSxTQUFTb0Isd0JBQXdCLEdBQTRGO0lBQ25JO0lBQ0EsTUFBTUMsVUFBMkUsR0FBRztNQUNuRkMsaUJBQWlCLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUM1QlMsZUFBZSxFQUFFVixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMxQlUsU0FBUyxFQUFFQyxJQUFJLENBQUNDLGdCQUFnQjtJQUNqQyxDQUFDO0lBQ0QsT0FBT0UsTUFBTSxDQUFDQyxNQUFNLENBQUNKLElBQUksQ0FBQ0ssY0FBYyxDQUFDLEVBQVNFLFVBQVUsQ0FBQztFQUc5RDtFQUFDO0VBRU0sU0FBU0UsdUJBQXVCLENBQ3RDQyxTQUFjLEVBQ2RDLFVBQWdDLEVBQ2hDQyxJQUFXLEVBQzZCO0lBQ3hDLE1BQU1DLElBQUksR0FBR0YsVUFBVSxDQUFDRyxPQUFPLEVBQUU7SUFDaENKLFNBQVMsQ0FBU0ksT0FBTyxHQUFHLE1BQU1ELElBQUk7SUFDdkMsTUFBTUUsVUFBVSxHQUFHZixJQUFJLENBQUNZLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuQyxPQUFPVCxNQUFNLENBQUNDLE1BQU0sQ0FBQ1csVUFBVSxFQUFFTCxTQUFTLENBQUM7RUFDNUM7RUFBQztFQUVNLFNBQVNNLGFBQWEsR0FFM0I7SUFDRCxNQUFNQyxTQUFTLEdBQUdqQixJQUFJLENBQUNrQixTQUFTLENBRS9CO0lBQ0RELFNBQVMsQ0FBQ2pCLElBQUksQ0FBQ21CLHFCQUFxQixHQUFHL0IsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDaEQsT0FBTzRCLFNBQVM7RUFDakI7RUFBQztFQUFBO0FBQUEifQ==