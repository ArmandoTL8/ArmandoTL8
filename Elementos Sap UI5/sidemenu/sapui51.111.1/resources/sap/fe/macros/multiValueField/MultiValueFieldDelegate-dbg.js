/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/CommonUtils", "sap/ui/mdc/field/MultiValueFieldDelegate"], function (CommonUtils, MdcMultiValueFieldDelegate) {
  "use strict";

  const MultiValueFieldDelegate = Object.assign({}, MdcMultiValueFieldDelegate);
  MultiValueFieldDelegate.updateItems = function (oPayload, aConditions, oControl) {
    const oListBinding = oControl.getBinding("items");
    if (oListBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
      const oBindingInfo = oControl.getBindingInfo("items");
      // check if conditions are added, removed or changed
      const oTemplate = oBindingInfo.template;
      const oKeyBindingInfo = oTemplate.getBindingInfo("key");
      const oDescriptionBindingInfo = oTemplate.getBindingInfo("description");
      const sKeyPath = oKeyBindingInfo && oKeyBindingInfo.parts[0].path;
      const sDescriptionPath = oDescriptionBindingInfo && oDescriptionBindingInfo.parts && oDescriptionBindingInfo.parts[0] && oDescriptionBindingInfo.parts[0].path;
      const aContexts = oListBinding.getCurrentContexts();
      const aDataToAdd = [];
      const oController = CommonUtils.getTargetView(oControl).getController();

      // Contexts to delete
      const aNewKeys = aConditions.map(function (oCondition) {
        return oCondition.values[0];
      });
      const aOldKeys = aContexts.map(function (oContext) {
        return oContext.getProperty(sKeyPath);
      });
      const aModificationPromises = [];
      for (let i = 0; i < aContexts.length; i++) {
        const oDeleteContext = aContexts[i];
        if (!aNewKeys.includes(oDeleteContext.getProperty(sKeyPath))) {
          aModificationPromises.push(oController.editFlow.deleteMultipleDocuments([oDeleteContext], {
            controlId: oControl.getId(),
            noDialog: true
          }));
        }
      }
      // data to add
      aConditions.forEach(oCondition => {
        if (!aOldKeys.includes(oCondition.values[0])) {
          const oItem = {};
          if (sKeyPath && sKeyPath.indexOf("/") === -1) {
            // we do not manage to create on a sub entity of the 1:n navigation
            oItem[sKeyPath] = oCondition.values[0];
            if (sDescriptionPath && sDescriptionPath.indexOf("/") === -1 && sDescriptionPath !== sKeyPath) {
              oItem[sDescriptionPath] = oCondition.values[1];
            }
            aDataToAdd.push(oItem);
          }
        }
      });
      if (aDataToAdd.length) {
        aModificationPromises.push(oController._editFlow.createMultipleDocuments(oListBinding, aDataToAdd, true, false, undefined));
      }
      return Promise.all(aModificationPromises);
    }
  };
  return MultiValueFieldDelegate;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aVZhbHVlRmllbGREZWxlZ2F0ZSIsIk9iamVjdCIsImFzc2lnbiIsIk1kY011bHRpVmFsdWVGaWVsZERlbGVnYXRlIiwidXBkYXRlSXRlbXMiLCJvUGF5bG9hZCIsImFDb25kaXRpb25zIiwib0NvbnRyb2wiLCJvTGlzdEJpbmRpbmciLCJnZXRCaW5kaW5nIiwiaXNBIiwib0JpbmRpbmdJbmZvIiwiZ2V0QmluZGluZ0luZm8iLCJvVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsIm9LZXlCaW5kaW5nSW5mbyIsIm9EZXNjcmlwdGlvbkJpbmRpbmdJbmZvIiwic0tleVBhdGgiLCJwYXJ0cyIsInBhdGgiLCJzRGVzY3JpcHRpb25QYXRoIiwiYUNvbnRleHRzIiwiZ2V0Q3VycmVudENvbnRleHRzIiwiYURhdGFUb0FkZCIsIm9Db250cm9sbGVyIiwiQ29tbW9uVXRpbHMiLCJnZXRUYXJnZXRWaWV3IiwiZ2V0Q29udHJvbGxlciIsImFOZXdLZXlzIiwibWFwIiwib0NvbmRpdGlvbiIsInZhbHVlcyIsImFPbGRLZXlzIiwib0NvbnRleHQiLCJnZXRQcm9wZXJ0eSIsImFNb2RpZmljYXRpb25Qcm9taXNlcyIsImkiLCJsZW5ndGgiLCJvRGVsZXRlQ29udGV4dCIsImluY2x1ZGVzIiwicHVzaCIsImVkaXRGbG93IiwiZGVsZXRlTXVsdGlwbGVEb2N1bWVudHMiLCJjb250cm9sSWQiLCJnZXRJZCIsIm5vRGlhbG9nIiwiZm9yRWFjaCIsIm9JdGVtIiwiaW5kZXhPZiIsIl9lZGl0RmxvdyIsImNyZWF0ZU11bHRpcGxlRG9jdW1lbnRzIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsImFsbCJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiTXVsdGlWYWx1ZUZpZWxkRGVsZWdhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbW1vblV0aWxzIGZyb20gXCJzYXAvZmUvY29yZS9Db21tb25VdGlsc1wiO1xuaW1wb3J0IFBhZ2VDb250cm9sbGVyIGZyb20gXCJzYXAvZmUvY29yZS9QYWdlQ29udHJvbGxlclwiO1xuaW1wb3J0IE1kY011bHRpVmFsdWVGaWVsZERlbGVnYXRlIGZyb20gXCJzYXAvdWkvbWRjL2ZpZWxkL011bHRpVmFsdWVGaWVsZERlbGVnYXRlXCI7XG5jb25zdCBNdWx0aVZhbHVlRmllbGREZWxlZ2F0ZSA9IE9iamVjdC5hc3NpZ24oe30sIE1kY011bHRpVmFsdWVGaWVsZERlbGVnYXRlKTtcbk11bHRpVmFsdWVGaWVsZERlbGVnYXRlLnVwZGF0ZUl0ZW1zID0gZnVuY3Rpb24gKG9QYXlsb2FkOiBhbnksIGFDb25kaXRpb25zOiBhbnksIG9Db250cm9sOiBhbnkpIHtcblx0Y29uc3Qgb0xpc3RCaW5kaW5nID0gb0NvbnRyb2wuZ2V0QmluZGluZyhcIml0ZW1zXCIpO1xuXHRpZiAob0xpc3RCaW5kaW5nLmlzQShcInNhcC51aS5tb2RlbC5vZGF0YS52NC5PRGF0YUxpc3RCaW5kaW5nXCIpKSB7XG5cdFx0Y29uc3Qgb0JpbmRpbmdJbmZvID0gb0NvbnRyb2wuZ2V0QmluZGluZ0luZm8oXCJpdGVtc1wiKTtcblx0XHQvLyBjaGVjayBpZiBjb25kaXRpb25zIGFyZSBhZGRlZCwgcmVtb3ZlZCBvciBjaGFuZ2VkXG5cdFx0Y29uc3Qgb1RlbXBsYXRlID0gb0JpbmRpbmdJbmZvLnRlbXBsYXRlO1xuXHRcdGNvbnN0IG9LZXlCaW5kaW5nSW5mbyA9IG9UZW1wbGF0ZS5nZXRCaW5kaW5nSW5mbyhcImtleVwiKTtcblx0XHRjb25zdCBvRGVzY3JpcHRpb25CaW5kaW5nSW5mbyA9IG9UZW1wbGF0ZS5nZXRCaW5kaW5nSW5mbyhcImRlc2NyaXB0aW9uXCIpO1xuXHRcdGNvbnN0IHNLZXlQYXRoID0gb0tleUJpbmRpbmdJbmZvICYmIG9LZXlCaW5kaW5nSW5mby5wYXJ0c1swXS5wYXRoO1xuXHRcdGNvbnN0IHNEZXNjcmlwdGlvblBhdGggPVxuXHRcdFx0b0Rlc2NyaXB0aW9uQmluZGluZ0luZm8gJiZcblx0XHRcdG9EZXNjcmlwdGlvbkJpbmRpbmdJbmZvLnBhcnRzICYmXG5cdFx0XHRvRGVzY3JpcHRpb25CaW5kaW5nSW5mby5wYXJ0c1swXSAmJlxuXHRcdFx0b0Rlc2NyaXB0aW9uQmluZGluZ0luZm8ucGFydHNbMF0ucGF0aDtcblx0XHRjb25zdCBhQ29udGV4dHMgPSBvTGlzdEJpbmRpbmcuZ2V0Q3VycmVudENvbnRleHRzKCk7XG5cdFx0Y29uc3QgYURhdGFUb0FkZDogYW55W10gPSBbXTtcblx0XHRjb25zdCBvQ29udHJvbGxlciA9IENvbW1vblV0aWxzLmdldFRhcmdldFZpZXcob0NvbnRyb2wpLmdldENvbnRyb2xsZXIoKSBhcyBQYWdlQ29udHJvbGxlcjtcblxuXHRcdC8vIENvbnRleHRzIHRvIGRlbGV0ZVxuXHRcdGNvbnN0IGFOZXdLZXlzID0gYUNvbmRpdGlvbnMubWFwKGZ1bmN0aW9uIChvQ29uZGl0aW9uOiBhbnkpIHtcblx0XHRcdHJldHVybiBvQ29uZGl0aW9uLnZhbHVlc1swXTtcblx0XHR9KTtcblx0XHRjb25zdCBhT2xkS2V5cyA9IGFDb250ZXh0cy5tYXAoZnVuY3Rpb24gKG9Db250ZXh0OiBhbnkpIHtcblx0XHRcdHJldHVybiBvQ29udGV4dC5nZXRQcm9wZXJ0eShzS2V5UGF0aCk7XG5cdFx0fSk7XG5cdFx0Y29uc3QgYU1vZGlmaWNhdGlvblByb21pc2VzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhQ29udGV4dHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IG9EZWxldGVDb250ZXh0ID0gYUNvbnRleHRzW2ldO1xuXHRcdFx0aWYgKCFhTmV3S2V5cy5pbmNsdWRlcyhvRGVsZXRlQ29udGV4dC5nZXRQcm9wZXJ0eShzS2V5UGF0aCkpKSB7XG5cdFx0XHRcdGFNb2RpZmljYXRpb25Qcm9taXNlcy5wdXNoKFxuXHRcdFx0XHRcdG9Db250cm9sbGVyLmVkaXRGbG93LmRlbGV0ZU11bHRpcGxlRG9jdW1lbnRzKFtvRGVsZXRlQ29udGV4dF0sIHsgY29udHJvbElkOiBvQ29udHJvbC5nZXRJZCgpLCBub0RpYWxvZzogdHJ1ZSB9KVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBkYXRhIHRvIGFkZFxuXHRcdGFDb25kaXRpb25zLmZvckVhY2goKG9Db25kaXRpb246IGFueSkgPT4ge1xuXHRcdFx0aWYgKCFhT2xkS2V5cy5pbmNsdWRlcyhvQ29uZGl0aW9uLnZhbHVlc1swXSkpIHtcblx0XHRcdFx0Y29uc3Qgb0l0ZW06IGFueSA9IHt9O1xuXHRcdFx0XHRpZiAoc0tleVBhdGggJiYgc0tleVBhdGguaW5kZXhPZihcIi9cIikgPT09IC0xKSB7XG5cdFx0XHRcdFx0Ly8gd2UgZG8gbm90IG1hbmFnZSB0byBjcmVhdGUgb24gYSBzdWIgZW50aXR5IG9mIHRoZSAxOm4gbmF2aWdhdGlvblxuXHRcdFx0XHRcdG9JdGVtW3NLZXlQYXRoXSA9IG9Db25kaXRpb24udmFsdWVzWzBdO1xuXG5cdFx0XHRcdFx0aWYgKHNEZXNjcmlwdGlvblBhdGggJiYgc0Rlc2NyaXB0aW9uUGF0aC5pbmRleE9mKFwiL1wiKSA9PT0gLTEgJiYgc0Rlc2NyaXB0aW9uUGF0aCAhPT0gc0tleVBhdGgpIHtcblx0XHRcdFx0XHRcdG9JdGVtW3NEZXNjcmlwdGlvblBhdGhdID0gb0NvbmRpdGlvbi52YWx1ZXNbMV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFEYXRhVG9BZGQucHVzaChvSXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAoYURhdGFUb0FkZC5sZW5ndGgpIHtcblx0XHRcdGFNb2RpZmljYXRpb25Qcm9taXNlcy5wdXNoKG9Db250cm9sbGVyLl9lZGl0Rmxvdy5jcmVhdGVNdWx0aXBsZURvY3VtZW50cyhvTGlzdEJpbmRpbmcsIGFEYXRhVG9BZGQsIHRydWUsIGZhbHNlLCB1bmRlZmluZWQpKTtcblx0XHR9XG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKGFNb2RpZmljYXRpb25Qcm9taXNlcyk7XG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpVmFsdWVGaWVsZERlbGVnYXRlO1xu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